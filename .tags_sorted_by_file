Reader	calMissRate\calcMissRate.cpp	/^Reader::Reader(std::ifstream & fin, std::ofstream & fout, int cap, int blk, int assoc) {$/;"	f	class:Reader
calLruMissRate	calMissRate\calcMissRate.cpp	/^Accur Histogram<B, Accur>::calLruMissRate(const int & cap, const int & blk, const int & assoc, const std::vector<double> & setDistr)$/;"	f	class:Histogram
calLruMissRatePoisson	calMissRate\calcMissRate.cpp	/^Accur Histogram<B, Accur>::calLruMissRatePoisson(const int & cap, const int & blk, const int & assoc)$/;"	f	class:Histogram
calMissRate	calMissRate\calcMissRate.cpp	/^Accur Histogram<B, Accur>::calMissRate(const int & cap, const int & blk, const int & assoc, const bool plru, const std::vector<double> & setDistr)$/;"	f	class:Histogram
calPlruMissRate	calMissRate\calcMissRate.cpp	/^Accur Histogram<B, Accur>::calPlruMissRate(const int & cap, const int & blk, const int & assoc)$/;"	f	class:Histogram
clear	calMissRate\calcMissRate.cpp	/^void Histogram<B, Accur>::clear()$/;"	f	class:Histogram
combinationRatio	calMissRate\calcMissRate.cpp	/^inline double combinationRatio(int b, int a, int k)$/;"	f
fullyToSetAssoc	calMissRate\calcMissRate.cpp	/^Accur Histogram<B, Accur>::fullyToSetAssoc(const int & cap, const int & blk, const int & assoc)$/;"	f	class:Histogram
log2p1	calMissRate\calcMissRate.cpp	/^inline T log2p1(T s)$/;"	f
main	calMissRate\calcMissRate.cpp	/^int main(int argc, char *argv[])$/;"	f
mapToVector	calMissRate\calcMissRate.cpp	/^bool Histogram<B, Accur>::mapToVector(std::vector<B> & buffer)$/;"	f	class:Histogram
print	calMissRate\calcMissRate.cpp	/^void Histogram<B, Accur>::print(std::ofstream & file)$/;"	f	class:Histogram
reuseDistToStackDist	calMissRate\calcMissRate.cpp	/^void Histogram<B, Accur>::reuseDistToStackDist()$/;"	f	class:Histogram
DOLOG	calMissRate\calcMissRate.h	28;"	d
DOLOG	calMissRate\calcMissRate.h	30;"	d
Histogram	calMissRate\calcMissRate.h	/^	Histogram() : samples(0), hits(0), missRate(0.0) {};$/;"	f	class:Histogram
Histogram	calMissRate\calcMissRate.h	/^class Histogram$/;"	c
LOG2	calMissRate\calcMissRate.h	19;"	d
MAXSETNUM	calMissRate\calcMissRate.h	20;"	d
MaxDist	calMissRate\calcMissRate.h	/^static int64_t MaxDist = 0;$/;"	v
Reader	calMissRate\calcMissRate.h	/^class Reader$/;"	c
Trunc	calMissRate\calcMissRate.h	/^static int64_t Trunc = 0;$/;"	v
binsTra	calMissRate\calcMissRate.h	/^	std::vector<Accur> binsTra;$/;"	m	class:Histogram
binsVec	calMissRate\calcMissRate.h	/^	std::vector<Accur> binsVec;$/;"	m	class:Histogram
hits	calMissRate\calcMissRate.h	/^	Accur hits;$/;"	m	class:Histogram
missRate	calMissRate\calcMissRate.h	/^	Accur missRate;$/;"	m	class:Histogram
samples	calMissRate\calcMissRate.h	/^	B samples;$/;"	m	class:Histogram
~Histogram	calMissRate\calcMissRate.h	/^	~Histogram() {};$/;"	f	class:Histogram
CVLINK_NULL	gcc\166.s	/^CVLINK_NULL:$/;"	l
LSQ_size	gcc\166.s	/^LSQ_size:$/;"	l
RSLINK_NULL	gcc\166.s	/^RSLINK_NULL:$/;"	l
RUU_size	gcc\166.s	/^RUU_size:$/;"	l
dep_names	gcc\166.s	/^dep_names:$/;"	l
fu_config	gcc\166.s	/^fu_config:$/;"	l
fu_pool	gcc\166.s	/^fu_pool:$/;"	l
inst_seq	gcc\166.s	/^inst_seq:$/;"	l
mem_lat	gcc\166.s	/^mem_lat:$/;"	l
mem_nelt	gcc\166.s	/^mem_nelt:$/;"	l
pcstat_nelt	gcc\166.s	/^pcstat_nelt:$/;"	l
pred_perfect	gcc\166.s	/^pred_perfect:$/;"	l
ptrace_nelt	gcc\166.s	/^ptrace_nelt:$/;"	l
ptrace_seq	gcc\166.s	/^ptrace_seq:$/;"	l
ruu_fetch_issue_delay	gcc\166.s	/^ruu_fetch_issue_delay:$/;"	l
ruu_include_spec	gcc\166.s	/^ruu_include_spec:$/;"	l
sim_cycle	gcc\166.s	/^sim_cycle:$/;"	l
sim_num_branches	gcc\166.s	/^sim_num_branches:$/;"	l
sim_num_insn	gcc\166.s	/^sim_num_insn:$/;"	l
sim_num_loads	gcc\166.s	/^sim_num_loads:$/;"	l
sim_num_refs	gcc\166.s	/^sim_num_refs:$/;"	l
sim_total_branches	gcc\166.s	/^sim_total_branches:$/;"	l
sim_total_insn	gcc\166.s	/^sim_total_insn:$/;"	l
sim_total_loads	gcc\166.s	/^sim_total_loads:$/;"	l
sim_total_refs	gcc\166.s	/^sim_total_refs:$/;"	l
spec_mode	gcc\166.s	/^spec_mode:$/;"	l
twolev_config	gcc\166.s	/^twolev_config:$/;"	l
twolev_nelt	gcc\166.s	/^twolev_nelt:$/;"	l
Fini	memTraceSimple.cpp	/^VOID Fini(INT32 code, VOID *v)$/;"	f
Histogram	memTraceSimple.cpp	/^Histogram<B>::Histogram(const Histogram<B> & rhs) : samples(rhs.samples), _size(rhs._size)$/;"	f	class:Histogram
Histogram	memTraceSimple.cpp	/^Histogram<B>::Histogram(int s) : samples(0), _size(s)$/;"	f	class:Histogram
RecordMemRefs	memTraceSimple.cpp	/^RecordMemRefs(VOID * loca)$/;"	f
Trace	memTraceSimple.cpp	/^VOID Trace(TRACE trace, VOID * v)$/;"	f
Usage	memTraceSimple.cpp	/^INT32 Usage()$/;"	f
calReuseDist	memTraceSimple.cpp	/^void ReuseDist::calReuseDist(uint64_t addr, Histogram<> & rdv)$/;"	f	class:ReuseDist
clear	memTraceSimple.cpp	/^void Histogram<B>::clear()$/;"	f	class:Histogram
doDump	memTraceSimple.cpp	/^doDump()$/;"	f
main	memTraceSimple.cpp	/^int main(int argc, char *argv[])$/;"	f
manhattanDist	memTraceSimple.cpp	/^double Histogram<B>::manhattanDist(const Histogram<B> & rhs)$/;"	f	class:Histogram
normalize	memTraceSimple.cpp	/^void Histogram<B>::normalize()$/;"	f	class:Histogram
operator +=	memTraceSimple.cpp	/^Histogram<B> & Histogram<B>::operator+=(const Histogram<B> & rhs)$/;"	f	class:Histogram
operator =	memTraceSimple.cpp	/^Histogram<B> & Histogram<B>::operator=(const Histogram<B> & rhs)$/;"	f	class:Histogram
operator []	memTraceSimple.cpp	/^B & Histogram<B>::operator[](const int idx)$/;"	f	class:Histogram
print	memTraceSimple.cpp	/^void Histogram<B>::print(std::ofstream & file)$/;"	f	class:Histogram
sample	memTraceSimple.cpp	/^void Histogram<B>::sample(int x)$/;"	f	class:Histogram
setSize	memTraceSimple.cpp	/^void Histogram<B>::setSize(int s)$/;"	f	class:Histogram
size	memTraceSimple.cpp	/^const int Histogram<B>::size() const { return _size; }$/;"	f	class:Histogram
~Histogram	memTraceSimple.cpp	/^Histogram<B>::~Histogram() { delete [] bins; }$/;"	f	class:Histogram
BlkBits	memTraceSimple.h	/^static uint64_t BlkBits = 6;$/;"	v
DOLOG	memTraceSimple.h	52;"	d
DOLOG	memTraceSimple.h	54;"	d
Entry	memTraceSimple.h	/^		Entry(Histogram<> * rdv) : phase(rdv), counter(0)$/;"	f	class:PhaseTable::Entry
Entry	memTraceSimple.h	/^	class Entry {$/;"	c	class:PhaseTable
Histogram	memTraceSimple.h	/^	Histogram() : bins(nullptr), samples(0), _size(0) {};$/;"	f	class:Histogram
Histogram	memTraceSimple.h	/^class Histogram$/;"	c
InterCount	memTraceSimple.h	/^static uint64_t InterCount = 0;$/;"	v
IntervalSize	memTraceSimple.h	/^static uint64_t IntervalSize = 0;$/;"	v
LOG2	memTraceSimple.h	33;"	d
NumIntervals	memTraceSimple.h	/^static uint64_t NumIntervals = 0;$/;"	v
NumMemAccs	memTraceSimple.h	/^static uint64_t NumMemAccs = 0;$/;"	v
PREDIC	memTraceSimple.h	35;"	d
PhaseTable	memTraceSimple.h	/^	PhaseTable() {};$/;"	f	class:PhaseTable
PhaseTable	memTraceSimple.h	/^class PhaseTable$/;"	c
ReuseDist	memTraceSimple.h	/^	ReuseDist() : index(0) {};$/;"	f	class:ReuseDist
ReuseDist	memTraceSimple.h	/^class ReuseDist$/;"	c
Truncation	memTraceSimple.h	/^static uint64_t Truncation = 0;$/;"	v
__MEM_TRACE_SIMPLE_H__	memTraceSimple.h	2;"	d
_size	memTraceSimple.h	/^	int _size;$/;"	m	class:Histogram
addrMap	memTraceSimple.h	/^	std::map<uint64_t, long> addrMap;$/;"	m	class:ReuseDist
bins	memTraceSimple.h	/^	B * bins;$/;"	m	class:Histogram
counter	memTraceSimple.h	/^		uint32_t counter;$/;"	m	class:PhaseTable::Entry
currRDD	memTraceSimple.h	/^Histogram<> currRDD;$/;"	v
find	memTraceSimple.h	/^	uint32_t find(const Histogram<> & rdv)$/;"	f	class:PhaseTable
fout	memTraceSimple.h	/^std::ofstream fout;$/;"	v
id	memTraceSimple.h	/^		uint32_t id;$/;"	m	class:PhaseTable::Entry
index	memTraceSimple.h	/^	long index;$/;"	m	class:ReuseDist
log2p1	memTraceSimple.h	/^inline T log2p1(T s)$/;"	f
phase	memTraceSimple.h	/^		Histogram<> * phase;$/;"	m	class:PhaseTable::Entry
phaseTable	memTraceSimple.h	/^PhaseTable phaseTable;$/;"	v
pt	memTraceSimple.h	/^	std::deque<Entry> pt;$/;"	m	class:PhaseTable
reuseDist	memTraceSimple.h	/^ReuseDist reuseDist;$/;"	v
samples	memTraceSimple.h	/^	B samples;$/;"	m	class:Histogram
setThreshold	memTraceSimple.h	/^	void setThreshold(double t) { threshold = t; }$/;"	f	class:PhaseTable
size	memTraceSimple.h	/^	const int size() const { return pt.size(); }$/;"	f	class:PhaseTable
threshold	memTraceSimple.h	/^	double threshold;$/;"	m	class:PhaseTable
~Entry	memTraceSimple.h	/^		~Entry() { delete phase; }$/;"	f	class:PhaseTable::Entry
~ReuseDist	memTraceSimple.h	/^	~ReuseDist() {};$/;"	f	class:ReuseDist
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
